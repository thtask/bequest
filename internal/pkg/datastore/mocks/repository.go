// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	datastore "github.com/dotunj/bequest/internal/pkg/datastore"
	gomock "github.com/golang/mock/gomock"
)

// MockAnswerRepository is a mock of AnswerRepository interface.
type MockAnswerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerRepositoryMockRecorder
}

// MockAnswerRepositoryMockRecorder is the mock recorder for MockAnswerRepository.
type MockAnswerRepositoryMockRecorder struct {
	mock *MockAnswerRepository
}

// NewMockAnswerRepository creates a new mock instance.
func NewMockAnswerRepository(ctrl *gomock.Controller) *MockAnswerRepository {
	mock := &MockAnswerRepository{ctrl: ctrl}
	mock.recorder = &MockAnswerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerRepository) EXPECT() *MockAnswerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnswerRepository) Create(ctx context.Context, answer *datastore.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAnswerRepositoryMockRecorder) Create(ctx, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnswerRepository)(nil).Create), ctx, answer)
}

// Delete mocks base method.
func (m *MockAnswerRepository) Delete(ctx context.Context, answer *datastore.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAnswerRepositoryMockRecorder) Delete(ctx, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAnswerRepository)(nil).Delete), ctx, answer)
}

// FindByKey mocks base method.
func (m *MockAnswerRepository) FindByKey(ctx context.Context, key string) (*datastore.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", ctx, key)
	ret0, _ := ret[0].(*datastore.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockAnswerRepositoryMockRecorder) FindByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockAnswerRepository)(nil).FindByKey), ctx, key)
}

// Update mocks base method.
func (m *MockAnswerRepository) Update(ctx context.Context, answer *datastore.Answer, value *datastore.Value) (*datastore.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, answer, value)
	ret0, _ := ret[0].(*datastore.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAnswerRepositoryMockRecorder) Update(ctx, answer, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAnswerRepository)(nil).Update), ctx, answer, value)
}

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventRepository) Create(ctx context.Context, event *datastore.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEventRepositoryMockRecorder) Create(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventRepository)(nil).Create), ctx, event)
}

// FindManyByKey mocks base method.
func (m *MockEventRepository) FindManyByKey(ctx context.Context, key string, pageable datastore.Pageable) ([]datastore.Event, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyByKey", ctx, key, pageable)
	ret0, _ := ret[0].([]datastore.Event)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindManyByKey indicates an expected call of FindManyByKey.
func (mr *MockEventRepositoryMockRecorder) FindManyByKey(ctx, key, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyByKey", reflect.TypeOf((*MockEventRepository)(nil).FindManyByKey), ctx, key, pageable)
}
